#!/usr/bin/env python3
"""
Research Organizer Main: Entry point for the self-modifying research collision chamber
Choose between CLI and GUI modes for interacting with genuinely recursive system
"""

import argparse
import sys
import os

def launch_cli():
    """Launch command line interface"""
    from recursive_collision_chamber import RecursiveCollisionChamber
    import time
    
    print("üß¨ RECURSIVE COLLISION CHAMBER - CLI MODE")
    print("=" * 60)
    print("Self-modifying research organizer with real code evolution")
    print()
    
    chamber = RecursiveCollisionChamber()
    
    print("Commands:")
    print("  add <content>     - Add research artifact")
    print("  upload <file>     - Upload file as artifact")
    print("  status           - Show system status")
    print("  collisions       - Show recent collisions")
    print("  evolve           - Force evolution")
    print("  chaos            - Inject chaos")
    print("  history          - Show evolution history")
    print("  demo             - Run demonstration")
    print("  exit             - Exit system")
    print()
    
    try:
        while True:
            try:
                command = input("üß¨ > ").strip().lower()
                
                if command == "exit":
                    break
                
                elif command == "status":
                    status = chamber.get_system_status()
                    print(f"\\nüìä SYSTEM STATUS:")
                    for key, value in status.items():
                        if key != 'method_performance':
                            print(f"  {key}: {value}")
                    
                    print(f"\\nüìà METHOD PERFORMANCE:")
                    for method, perf in status['method_performance'].items():
                        print(f"  {method}: {perf:.3f}")
                
                elif command == "collisions":
                    collisions = chamber.get_significant_collisions()
                    print(f"\\n‚ö° SIGNIFICANT COLLISIONS ({len(collisions)}):")
                    for i, collision in enumerate(collisions[-10:], 1):  # Last 10
                        print(f"  {i}. {collision.connection_type} (strength: {collision.strength:.2f})")
                        print(f"     {collision.insight[:80]}...")
                        print(f"     Generated by: {collision.generated_by_method}")
                        print()
                
                elif command == "evolve":
                    print("üîÑ Forcing system evolution...")
                    chamber.force_evolution()
                    time.sleep(2)
                    print("‚úÖ Evolution triggered")
                
                elif command == "chaos":
                    print("üí£ Injecting chaos...")
                    chamber.inject_chaos()
                    print("‚úÖ Chaos injected")
                
                elif command == "history":
                    history = chamber.get_evolution_history()
                    print(f"\\nüß¨ EVOLUTION HISTORY ({len(history)} generations):")
                    for evolution in history:
                        print(f"  Gen {evolution['generation']}: {evolution['method_name']}")
                        print(f"    Based on: {evolution['based_on']}")
                        print(f"    Replaced: {evolution['replaced']}")
                        print(f"    Time: {evolution['timestamp']}")
                        print()
                
                elif command == "demo":
                    print("üé¨ Running demonstration...")
                    _run_cli_demo(chamber)
                
                elif command.startswith("add "):
                    content = command[4:].strip()
                    if content:
                        artifact_id = chamber.add_artifact(content)
                        print(f"‚úÖ Added artifact: {artifact_id}")
                    else:
                        print("‚ùå Please provide content to add")
                
                elif command.startswith("upload "):
                    filepath = command[7:].strip()
                    if os.path.exists(filepath):
                        try:
                            with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                                content = f.read()
                            
                            content_type = 'pdf' if filepath.endswith('.pdf') else 'text'
                            artifact_id = chamber.add_artifact(
                                content, 
                                content_type, 
                                {'filename': os.path.basename(filepath)}
                            )
                            print(f"‚úÖ Uploaded: {os.path.basename(filepath)} as {artifact_id}")
                        except Exception as e:
                            print(f"‚ùå Upload failed: {e}")
                    else:
                        print(f"‚ùå File not found: {filepath}")
                
                else:
                    print("‚ùå Unknown command. Type 'exit' to quit.")
                    
            except KeyboardInterrupt:
                print("\\n\\nüõë Interrupted")
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
    
    finally:
        print("\\nüß¨ Shutting down collision chamber...")
        chamber.shutdown()

def _run_cli_demo(chamber):
    """Run CLI demonstration"""
    import time
    
    demo_artifacts = [
        ("Quantum mechanics describes the behavior of matter and energy at atomic scales, involving wave-particle duality and uncertainty principles.", "text"),
        ("Machine learning algorithms enable computers to learn patterns from data without explicit programming, using statistical methods.", "text"),
        ("Consciousness involves subjective experience, awareness, and the hard problem of explaining qualia and phenomenal experience.", "text"),
        ("Network theory analyzes complex systems as interconnected nodes, revealing emergent properties and collective behaviors.", "text"),
        ("Cooking transforms raw ingredients through heat application, involving chemical reactions like Maillard browning and protein denaturation.", "text")
    ]
    
    print("üìÑ Adding demonstration artifacts...")
    for content, content_type in demo_artifacts:
        artifact_id = chamber.add_artifact(content, content_type)
        print(f"  Added: {artifact_id}")
        time.sleep(1)  # Allow processing
    
    print("\\n‚ö° Processing collisions...")
    time.sleep(3)
    
    # Show results
    collisions = chamber.get_significant_collisions()
    print(f"\\nüéØ Found {len(collisions)} significant collisions:")
    for collision in collisions[:5]:  # Show first 5
        print(f"  ‚Ä¢ {collision.connection_type}: {collision.insight[:60]}...")
    
    # Force evolution
    print("\\nüîÑ Forcing evolution...")
    chamber.force_evolution()
    time.sleep(2)
    
    # Add more artifacts
    print("\\nüìÑ Adding more artifacts to test evolved methods...")
    new_artifacts = [
        ("Artificial intelligence systems exhibit emergent behaviors that raise questions about machine consciousness and awareness.", "text"),
        ("Quantum computing leverages superposition and entanglement to process information in fundamentally different ways.", "text")
    ]
    
    for content, content_type in new_artifacts:
        artifact_id = chamber.add_artifact(content, content_type)
        print(f"  Added: {artifact_id}")
        time.sleep(1)
    
    # Show final status
    status = chamber.get_system_status()
    print(f"\\nüìä Final Status:")
    print(f"  Artifacts: {status['artifacts_count']}")
    print(f"  Collisions: {status['total_collisions']}")
    print(f"  Active Methods: {status['active_methods']}")
    print(f"  Generation: {status['generation_count']}")
    
    print("\\n‚úÖ Demonstration complete!")

def launch_gui():
    """Launch graphical user interface"""
    try:
        from collision_chamber_gui import CollisionChamberGUI
        
        print("üß¨ Launching Recursive Collision Chamber GUI...")
        print("Real-time visualization of self-modifying research organizer")
        print()
        
        app = CollisionChamberGUI()
        app.run()
        
    except ImportError as e:
        print(f"‚ùå GUI dependencies not available: {e}")
        print("Try running with --cli flag for command line interface")
        sys.exit(1)

def run_demonstration():
    """Run full system demonstration"""
    from recursive_collision_chamber import demonstrate_recursive_collision_chamber
    demonstrate_recursive_collision_chamber()

def main():
    """Main entry point"""
    parser = argparse.ArgumentParser(
        description="Recursive Collision Chamber: Self-modifying research organizer",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
    python research_organizer_main.py                # Launch GUI (default)
    python research_organizer_main.py --cli          # Command line interface
    python research_organizer_main.py --demo         # Run demonstration

The system genuinely modifies its own code at runtime:
- Dynamic algorithm generation and execution
- Real-time method evolution based on performance
- Failure injection and recovery mechanisms
- True recursive self-modification (not just simulation)

This is NOT recursive theater - this is actual self-modifying code.
        """
    )
    
    parser.add_argument(
        "--cli",
        action="store_true",
        help="Launch command line interface"
    )
    
    parser.add_argument(
        "--demo",
        action="store_true",
        help="Run system demonstration"
    )
    
    args = parser.parse_args()
    
    # Print header
    print("üß¨ RECURSIVE COLLISION CHAMBER")
    print("=" * 60)
    print("Self-modifying research organizer with REAL code evolution")
    print("Not recursive theater - genuine runtime self-modification")
    print()
    
    if args.cli:
        launch_cli()
    elif args.demo:
        run_demonstration()
    else:
        # Default to GUI
        launch_gui()

if __name__ == "__main__":
    main()

